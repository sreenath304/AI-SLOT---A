from queue import PriorityQueue

def a_star(start, goal, graph, h):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from, g = {}, {start: 0}
    while not open_set.empty():
        _, current = open_set.get()
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1] + [goal]
        for neighbor, cost in graph[current]:
            temp_g = g[current] + cost
            if neighbor not in g or temp_g < g[neighbor]:
                g[neighbor] = temp_g
                f = temp_g + h[neighbor]
                open_set.put((f, neighbor))
                came_from[neighbor] = current

graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 3), ('E', 1)],
    'C': [('F', 5)],
    'D': [], 'E': [('F', 2)], 'F': []
}
h = {'A': 7, 'B': 6, 'C': 2, 'D': 1, 'E': 1, 'F': 0}
print("Path:", a_star('A', 'F', graph, h))
